import numpy as np
import scipy.signal
import matplotlib.pyplot as plt
from scipy import stats

a=[15.21918678,14.5906992,12.51529598,15.66634083,14.2891674,14.73511982
,14.5478096,13.76031303,13.50284863,12.702075,12.530756,14.37583256
,13.14678192,12.93790531,15.14659977,12.35420609,13.32051659,13.76389027
,13.17697239,13.41176701,14.62198448,12.59379578,14.26810169,13.73078918
,12.66647053,12.904706,12.49441242,12.53944016,13.83814335,14.19931221
,13.16743946,13.94211769,13.21786785,12.48557472,15.9911871,13.80250835
,14.94682598,12.4868803,12.94208145,14.52580547,12.80706978,15.29462719
,12.32524109,12.68781757,12.74595928,14.51051331,12.54348278,13.58300495
,12.35585976,12.85782528,12.68843555,12.5312891,12.45488453,13.53217697
,12.39083385,13.74389172,14.87471771,13.14178181,13.3282156,12.68223763
,14.0573473,14.25118732,12.7333622,15.44851303,12.48342133,13.84129238
,13.12906361,16.4275322,14.47465801,15.68264294,12.6639595,13.18470097
,14.78236294,13.18489265,12.97288132,13.13313484,14.17851067,15.40045357
,12.54062462,13.34439659,13.20781612,12.8514986,13.66970825,12.38806248
,13.07484436,13.5425272,13.12895679,12.74080181,12.88926506,14.53039932
,13.70953751,12.97501278,13.53303242,14.8939743,13.54809666,12.43320274
,12.26864052,13.93810749,12.83866692,13.27982712,13.16241455,12.67221546
,14.30743504,14.09561825,12.38189983,13.11454582,12.71230793,14.35453701
,15.47587109,15.36225891,12.76333523,12.31514263,13.01278496,13.06078243
,13.85904408,13.35059643,12.38201618,12.95283508,12.30285072,12.82584476
,16.40789604,15.75856495,13.63751984,12.49639416,12.94822693,16.74252319
,13.43415451,14.36648083,12.33387089,14.45370388,13.57876492,13.1034956
,13.46643543,14.03172779,15.79769993,15.05234528,13.37135029,12.82078171
,13.90213203,12.38774204,13.01556396,13.13115311,14.78287411,13.72313309
,12.75693893,13.60564423,13.73547268,13.96722126,13.39281273,13.2888813
,14.54981327,12.82295513,13.31351852,13.10495949,13.32057953,14.83559704
,12.32170963,12.95391846,12.56155586,13.99136639,13.70240116,13.4667902
,12.48917675,15.8014164,16.02707863,12.65697384,13.79586792,14.26818657
,12.29539299,13.44877052,15.86701202,13.90077019,14.01361179,13.41351604
,14.68223763,12.96112633,13.03037643,13.13297749,12.63802052,13.66300297
,12.99958801,12.36944389,15.23287868,13.0402174,12.56595039,14.04829311
,12.87978649,13.83036041,15.93277168,14.54677296,13.77900982,12.87222385
,12.42647171,15.13981533,12.77105904,12.61257267,14.11145306,12.7246151
,13.71481133,13.73992348,14.28666306,15.43430805,13.41724777,12.52700996
,12.41340923,16.34977341,15.60083389,13.48187447,13.06797409,15.71469212
,16.16624832,13.59839535,12.49224567,14.65146065,12.57602882,13.04895782
,12.80143261,16.69192886,13.75504112,13.75097275,13.42269516,13.83289719
,12.97258282,15.74316692,12.79730988,13.65159512,13.00450897,15.17973614
,12.25412369,14.34129143,12.93757343,12.62615681,16.68551254,12.44407177
,12.60092545,12.56500435,13.27141571,13.16297913,13.72336769,13.96053219
,13.52171516,15.56583881,12.40833569,12.56853104,16.57134438,13.99522018
,14.74555779,16.56170273,16.28878975,14.64850426,13.78600693,13.48131752
,12.67486,12.9203701,12.95959282,12.68889904,12.6081543,14.61535931
,14.67495537,12.95293999,12.34055042,13.93236542,13.25059795,12.72618866
,15.22882652,14.97312832,16.20939064,13.07982063,13.30086327,14.98564243
,14.59995747,13.33904171,12.47487354,14.79731655,13.00117874,13.03792953
,13.71830273,13.26134205,13.89279652,12.67258358,14.13513851,13.6319294
,14.43684387,15.02665424,15.30579472,12.34065819,14.61832333,13.5423727
,12.32123375,13.20991611,12.3277483,12.95369911,14.5913868,12.64070797
,14.68062592,13.56323814,14.72138882,12.46846199,12.62913418,13.40108967
,14.13228893,12.74602127,16.0112381,12.41623211,12.82360458,15.6930275
,12.33416271,13.47719955,14.88734722,12.87031746,13.91083145,14.8064518
,12.87062454,12.63692474,13.32315063,16.3672657,12.87408447,15.42220879
,13.82344913,15.26826572,12.94751167,12.35735798,14.82303905,16.29918671
,15.12896252,13.07356644,15.76924133,15.51590443,13.44286156,12.51044273
,12.82273483,12.45787716,14.37157917,13.02065277,12.61751175,14.05005455
,12.5445137,15.2970295,14.1305275,14.12881088,12.31435394,13.20514774
,12.99253559,13.3507719,13.11405087,13.8362751,12.82072163,12.71721363
,12.91647148,14.2346096,15.67597198,12.89859962,12.38048458,16.02387428
,12.84630013,12.80542278,12.97524548,16.58636665,14.94620323,15.36760235
,14.75477505,15.16937828,15.69825554,15.00053501,12.7481823,13.36111164
,13.6443243,13.15768528,15.31295204,12.82128906,12.58481979,13.15105057
,13.57988071,12.50236511,13.15227795,13.06186008]

from seaborn import distplot
from my_functions import *

#a = [8, 9, 11, 13, 15, 16, 12, 10, 7, 8, 9, 11, 13, 15, 16, 12, 10, 7, 3, 2, 4, 20, 21]
#a = np.asarray(a, dtype='float64')
#a = map(float, a)
a = np.asarray(a, dtype='float64')

# data histogram
num, bins = np.histogram(a, bins=50)

# Mode
# mode_seed = bins(num == max(num))
mode_seed = bins[np.where(num == max(num))]

# Bin steps
# bin_steps = diff(bins(1:2))
bin_steps = np.diff(bins[0:2])[0]

# x axis
# x = bins(1:end-1) + bin_steps / 2
x = bins[0:len(bins)-1] + bin_steps / 2

# next low bin
# next_low_bin = x(1) - bin_steps
next_low_bin = x[0] - bin_steps

# add points
# add_points = flipud([next_low_bin:-bin_steps:0]) >> Tell Julie about flip mistake
add_points = np.arange(start=next_low_bin, stop=0, step=-bin_steps)
# add_points = np.flipud(points)

# x = [add_points, x]
x = np.concatenate([add_points, x])

# zeros
# num = [zeros(size(add_points, 2), 1)', num]
zeros = np.zeros((len(add_points), 1))
zeros = zeros.reshape(len(zeros),)
num = np.concatenate([zeros, num])

# if numel(mode_seed) > 1
#     mode_seed = mean(mode_seed)
if len(mode_seed) > 1:
    mode_seed = np.mean(mode_seed)

# p0 = [max(num), mode_seed, 2 * nanstd(coords), prctile(curr_amplis, 1)]
p0 = [np.max(num), mode_seed, np.nanstd(a), np.percentile(a, 1)]
p0 = np.asarray(p0, dtype='float64')

# Curve fit
fit = curve_fit_(x, num, p0)
new_p0 = fit[0]
print('p0:', new_p0)
print('a:', new_p0[0])
print('mu:', new_p0[1])
print('s:', new_p0[2])

# n_fit_no_cut = JF_gaussian_cut(x, fitOutput(1), fitOutput(2), fitOutput(3), 0)
# n_fit_no_cut = gaussian_cut(x, a=new_p0[0], mu=new_p0[1], sigma=new_p0[2], xcut=0)

# n_fit = JF_gaussian_cut(x, fitOutput(1), fitOutput(2), fitOutput(3), fitOutput(4));
n_fit = gaussian_cut(x, a=new_p0[0], mu=new_p0[1], sigma=new_p0[2], xcut=new_p0[3])
plt.plot(x, n_fit, color='red')

# min_amplitude = fitOutput(4);
min_amplitude = new_p0[3]

# norm_area_ndtr = normcdf((fitOutput(2) - min_amplitude)/fitOutput(3));
norm_area_ndtr = stats.norm.cdf(1.65, loc=new_p0[1], scale=new_p0[2])

# percent_missing_ndtr = 100 * (1 - norm_area_ndtr)
percent_missing_ndtr = 100 * (1 - norm_area_ndtr)
print('percent_missing_ndtr', percent_missing_ndtr)

plt.hist(a, bins=100, orientation='vertical', color='lightgray')
plt.axvline(min_amplitude, color='greenyellow', clip_on=True, lw=3)




plt.show()
